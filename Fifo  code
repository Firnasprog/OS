import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

class Test {
    static int pageFaults(int pages[], int n, int capacity) {
        if (capacity <= 0) {
            throw new IllegalArgumentException("Capacity must be greater than zero.");
        }

        HashSet<Integer> pageSet = new HashSet<>(capacity);
        Queue<Integer> pageQueue = new LinkedList<>();
        int pageFaults = 0;

        for (int i = 0; i < n; i++) {
            if (pageSet.size() < capacity) {
                if (!pageSet.contains(pages[i])) {
                    pageSet.add(pages[i]);
                    pageFaults++;
                    pageQueue.add(pages[i]);
                }
            } else {
                if (!pageSet.contains(pages[i])) {
                    int val = pageQueue.peek();
                    pageQueue.poll();
                    pageSet.remove(val);
                    pageSet.add(pages[i]);
                    pageQueue.add(pages[i]);
                    pageFaults++;
                }
            }
        }
        return pageFaults;
    }

    public static void main(String args[]) {
        int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
        int capacity = 4;
        System.out.println("Total Page Faults: " + pageFaults(pages, pages.length, capacity));
    }
}






fifo record code 



import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

class Test {
    static int pageFaults(int pages[], int n, int capacity) {
        if (capacity <= 0) {
            throw new IllegalArgumentException("Capacity must be greater than zero.");
        }

        HashSet<Integer> pageSet = new HashSet<>(capacity);
        Queue<Integer> pageQueue = new LinkedList<>();
        int pageFaults = 0;

        for (int i = 0; i < n; i++) {
            if (pageSet.size() < capacity) {
                if (!pageSet.contains(pages[i])) {
                    pageSet.add(pages[i]);
                    pageFaults++;
                    pageQueue.add(pages[i]);
                }
            } else {
                if (!pageSet.contains(pages[i])) {
                    int val = pageQueue.peek();
                    pageQueue.poll();
                    pageSet.remove(val);
                    pageSet.add(pages[i]);
                    pageQueue.add(pages[i]);
                    pageFaults++;
                }
            }
        }
        return pageFaults;
    }

    public static void main(String args[]) {
        int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
        int capacity = 4;
        System.out.println("Total Page Faults: " + pageFaults(pages, pages.length, capacity));
    }
}
